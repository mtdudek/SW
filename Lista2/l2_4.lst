
l2_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001ac  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000075c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cae  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8e:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <refresh>:
0b11111000,
0b10000000,
0b00010000};

void refresh(int8_t num, int8_t bit){
  LEDs_PORT = num_bit_rep[num];
  96:	e8 2f       	mov	r30, r24
  98:	88 0f       	add	r24, r24
  9a:	ff 0b       	sbc	r31, r31
  9c:	e0 50       	subi	r30, 0x00	; 0
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	80 81       	ld	r24, Z
  a2:	8b b9       	out	0x0b, r24	; 11
  LEDs_POWER_PORT &= ~(1<<bit);
  a4:	28 b1       	in	r18, 0x08	; 8
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 c0       	rjmp	.+2      	; 0xae <refresh+0x18>
  ac:	88 0f       	add	r24, r24
  ae:	6a 95       	dec	r22
  b0:	ea f7       	brpl	.-6      	; 0xac <refresh+0x16>
  b2:	98 2f       	mov	r25, r24
  b4:	90 95       	com	r25
  b6:	92 23       	and	r25, r18
  b8:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	ef e1       	ldi	r30, 0x1F	; 31
  bc:	fe e4       	ldi	r31, 0x4E	; 78
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <refresh+0x28>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <refresh+0x2e>
  c4:	00 00       	nop
  _delay_ms(5);
  LEDs_PORT = 0b11111111;
  c6:	9f ef       	ldi	r25, 0xFF	; 255
  c8:	9b b9       	out	0x0b, r25	; 11
  LEDs_POWER_PORT |= (1<<bit);
  ca:	98 b1       	in	r25, 0x08	; 8
  cc:	89 2b       	or	r24, r25
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	08 95       	ret

000000d2 <main>:
}

int main()
{
  //konfigurowanie portow
  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  d2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  d6:	87 7e       	andi	r24, 0xE7	; 231
  d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  LEDs_DDR |= 0b11111111;
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8a b9       	out	0x0a, r24	; 10
  LEDs_PORT |= 0b11111111;
  e2:	9b b1       	in	r25, 0x0b	; 11
  e4:	8b b9       	out	0x0b, r24	; 11
  LEDs_POWER_DDR |= 0b00000011;
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	87 b9       	out	0x07, r24	; 7
  LEDs_POWER_PORT |= 0b00000011;
  ec:	88 b1       	in	r24, 0x08	; 8
  ee:	83 60       	ori	r24, 0x03	; 3
  f0:	88 b9       	out	0x08, r24	; 8
  int8_t c=-1,j=0,d=0;
  f2:	4f ef       	ldi	r20, 0xFF	; 255
  // program testowany
  while(1) {
    c++;
    c -= (c/60)*60;
  f4:	79 e8       	ldi	r23, 0x89	; 137
  f6:	64 ec       	ldi	r22, 0xC4	; 196
    d = c/10;
  f8:	57 e6       	ldi	r21, 0x67	; 103

void refresh(int8_t num, int8_t bit){
  LEDs_PORT = num_bit_rep[num];
  LEDs_POWER_PORT &= ~(1<<bit);
  _delay_ms(5);
  LEDs_PORT = 0b11111111;
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  LEDs_POWER_DDR |= 0b00000011;
  LEDs_POWER_PORT |= 0b00000011;
  int8_t c=-1,j=0,d=0;
  // program testowany
  while(1) {
    c++;
  fc:	4f 5f       	subi	r20, 0xFF	; 255
    c -= (c/60)*60;
  fe:	47 02       	muls	r20, r23
 100:	81 2d       	mov	r24, r1
 102:	11 24       	eor	r1, r1
 104:	84 0f       	add	r24, r20
 106:	85 95       	asr	r24
 108:	85 95       	asr	r24
 10a:	85 95       	asr	r24
 10c:	85 95       	asr	r24
 10e:	85 95       	asr	r24
 110:	47 fd       	sbrc	r20, 7
 112:	83 95       	inc	r24
 114:	86 9f       	mul	r24, r22
 116:	40 0d       	add	r20, r0
 118:	11 24       	eor	r1, r1
    d = c/10;
 11a:	45 02       	muls	r20, r21
 11c:	a1 2d       	mov	r26, r1
 11e:	11 24       	eor	r1, r1
 120:	a5 95       	asr	r26
 122:	a5 95       	asr	r26
 124:	47 fd       	sbrc	r20, 7
 126:	a3 95       	inc	r26
 128:	e4 2f       	mov	r30, r20
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	a8 9f       	mul	r26, r24
 12e:	e0 19       	sub	r30, r0
 130:	11 24       	eor	r1, r1
 132:	0e 2e       	mov	r0, r30
 134:	00 0c       	add	r0, r0
 136:	ff 0b       	sbc	r31, r31
    j = c -d*10;
 138:	84 e6       	ldi	r24, 0x64	; 100
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	e0 50       	subi	r30, 0x00	; 0
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	1a 16       	cp	r1, r26
 142:	f4 f4       	brge	.+60     	; 0x180 <main+0xae>
 144:	0a 2e       	mov	r0, r26
 146:	00 0c       	add	r0, r0
 148:	bb 0b       	sbc	r27, r27
0b11111000,
0b10000000,
0b00010000};

void refresh(int8_t num, int8_t bit){
  LEDs_PORT = num_bit_rep[num];
 14a:	a0 50       	subi	r26, 0x00	; 0
 14c:	bf 4f       	sbci	r27, 0xFF	; 255
 14e:	3c 91       	ld	r19, X
 150:	3b b9       	out	0x0b, r19	; 11
  LEDs_POWER_PORT &= ~(1<<bit);
 152:	40 98       	cbi	0x08, 0	; 8
 154:	cf e1       	ldi	r28, 0x1F	; 31
 156:	de e4       	ldi	r29, 0x4E	; 78
 158:	21 97       	sbiw	r28, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x86>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x8c>
 15e:	00 00       	nop
  _delay_ms(5);
  LEDs_PORT = 0b11111111;
 160:	2b b9       	out	0x0b, r18	; 11
  LEDs_POWER_PORT |= (1<<bit);
 162:	40 9a       	sbi	0x08, 0	; 8
0b11111000,
0b10000000,
0b00010000};

void refresh(int8_t num, int8_t bit){
  LEDs_PORT = num_bit_rep[num];
 164:	30 81       	ld	r19, Z
 166:	3b b9       	out	0x0b, r19	; 11
  LEDs_POWER_PORT &= ~(1<<bit);
 168:	41 98       	cbi	0x08, 1	; 8
 16a:	cf e1       	ldi	r28, 0x1F	; 31
 16c:	de e4       	ldi	r29, 0x4E	; 78
 16e:	21 97       	sbiw	r28, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x9c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xa2>
 174:	00 00       	nop
  _delay_ms(5);
  LEDs_PORT = 0b11111111;
 176:	2b b9       	out	0x0b, r18	; 11
  LEDs_POWER_PORT |= (1<<bit);
 178:	41 9a       	sbi	0x08, 1	; 8
 17a:	01 97       	sbiw	r24, 0x01	; 1
  while(1) {
    c++;
    c -= (c/60)*60;
    d = c/10;
    j = c -d*10;
    for(int i=0;i<100;i++){
 17c:	41 f7       	brne	.-48     	; 0x14e <main+0x7c>
 17e:	be cf       	rjmp	.-132    	; 0xfc <main+0x2a>
 180:	af e1       	ldi	r26, 0x1F	; 31
 182:	be e4       	ldi	r27, 0x4E	; 78
 184:	11 97       	sbiw	r26, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0xb2>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0xb8>
 18a:	00 00       	nop
0b11111000,
0b10000000,
0b00010000};

void refresh(int8_t num, int8_t bit){
  LEDs_PORT = num_bit_rep[num];
 18c:	30 81       	ld	r19, Z
 18e:	3b b9       	out	0x0b, r19	; 11
  LEDs_POWER_PORT &= ~(1<<bit);
 190:	41 98       	cbi	0x08, 1	; 8
 192:	cf e1       	ldi	r28, 0x1F	; 31
 194:	de e4       	ldi	r29, 0x4E	; 78
 196:	21 97       	sbiw	r28, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0xc4>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xca>
 19c:	00 00       	nop
  _delay_ms(5);
  LEDs_PORT = 0b11111111;
 19e:	2b b9       	out	0x0b, r18	; 11
  LEDs_POWER_PORT |= (1<<bit);
 1a0:	41 9a       	sbi	0x08, 1	; 8
 1a2:	01 97       	sbiw	r24, 0x01	; 1
  while(1) {
    c++;
    c -= (c/60)*60;
    d = c/10;
    j = c -d*10;
    for(int i=0;i<100;i++){
 1a4:	69 f7       	brne	.-38     	; 0x180 <main+0xae>
 1a6:	aa cf       	rjmp	.-172    	; 0xfc <main+0x2a>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
