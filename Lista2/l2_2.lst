
l2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080012a  0080012a  0000036e  2**0
                  ALLOC
  3 .stab         000008d0  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ec4  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000026ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  9e:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:
}

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream){
  // czekaj aż transmiter gotowy
  while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream){
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
  return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:
#define UBRR_VALUE ((F_CPU)/16/(BAUD)-1)   // zgodnie ze wzorem

// inicjalizacja UART
void uart_init(){
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
  d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e4:	08 95       	ret

000000e6 <main>:
#define UBRR_VALUE ((F_CPU)/16/(BAUD)-1)   // zgodnie ze wzorem

// inicjalizacja UART
void uart_init(){
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
  f2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

int main(){ 
  // zainicjalizuj UART
  uart_init();
  // skonfiguruj strumienie wejścia/wyjścia
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 102:	8a e2       	ldi	r24, 0x2A	; 42
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	23 e5       	ldi	r18, 0x53	; 83
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <__data_end+0x9>
 10e:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__data_end+0x8>
 112:	2c e5       	ldi	r18, 0x5C	; 92
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__data_end+0xb>
 11a:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__data_end+0xa>
 11e:	23 e0       	ldi	r18, 0x03	; 3
 120:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <__data_end+0x3>
 124:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0xd>
 128:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end+0xc>
  stdin = stdout = stderr = &uart_file;
 12c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__iob+0x5>
 130:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__iob+0x4>
 134:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__iob+0x3>
 138:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__iob+0x2>
 13c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__iob+0x1>
 140:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__iob>
  //konfigurowanie portow
  LEDs_DDR |= 0b11100000;
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	80 6e       	ori	r24, 0xE0	; 224
 148:	8a b9       	out	0x0a, r24	; 10
  LEDs_PORT &= 0b00000000;
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	1b b8       	out	0x0b, r1	; 11
  BUTTON_DDR &= 0b11111110;
 14e:	38 98       	cbi	0x07, 0	; 7
  BUTTON_PORT |= 0b00000001;
 150:	40 9a       	sbi	0x08, 0	; 8
  // program testowany
  uint8_t pressed = 0,notpressed = 0;
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
      pressed=0;
    }   
    if (notpressed == 5){
	printf("%c",morse[i]);
  	LEDs_PORT |= 0b00100000;
	i=1;
 156:	01 e0       	ldi	r16, 0x01	; 1
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	0b c0       	rjmp	.+22     	; 0x172 <main+0x8c>
  uint8_t pressed = 0,notpressed = 0;
  while(1) {
    //czy naciśnięto guzik 
    if (!(PINC & 0b00000001) ){
      notpressed = 0;
      pressed++;
 15c:	8f 5f       	subi	r24, 0xFF	; 255
  // program testowany
  uint8_t pressed = 0,notpressed = 0;
  while(1) {
    //czy naciśnięto guzik 
    if (!(PINC & 0b00000001) ){
      notpressed = 0;
 15e:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	3f ef       	ldi	r19, 0xFF	; 255
 162:	91 ee       	ldi	r25, 0xE1	; 225
 164:	24 e0       	ldi	r18, 0x04	; 4
 166:	31 50       	subi	r19, 0x01	; 1
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	20 40       	sbci	r18, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x80>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x8a>
 170:	00 00       	nop
  BUTTON_PORT |= 0b00000001;
  // program testowany
  uint8_t pressed = 0,notpressed = 0;
  while(1) {
    //czy naciśnięto guzik 
    if (!(PINC & 0b00000001) ){
 172:	30 9b       	sbis	0x06, 0	; 6
 174:	f3 cf       	rjmp	.-26     	; 0x15c <main+0x76>
      notpressed = 0;
      pressed++;
    } else {
      notpressed++;
 176:	cf 5f       	subi	r28, 0xFF	; 255
      if(pressed<3&&pressed>0){
 178:	9f ef       	ldi	r25, 0xFF	; 255
 17a:	98 0f       	add	r25, r24
 17c:	92 30       	cpi	r25, 0x02	; 2
 17e:	e0 f1       	brcs	.+120    	; 0x1f8 <main+0x112>
  	LEDs_PORT |= 0b10000000;
	i*=2;
    	_delay_ms(75);
	LEDs_PORT &= 0b00000000;
      } else if (pressed>=3){
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	10 f5       	brcc	.+68     	; 0x1c8 <main+0xe2>
    	_delay_ms(75);
	LEDs_PORT &= 0b00000000;
      }
      pressed=0;
    }   
    if (notpressed == 5){
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	11 f0       	breq	.+4      	; 0x18c <main+0xa6>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	ea cf       	rjmp	.-44     	; 0x160 <main+0x7a>
	printf("%c",morse[i]);
 18c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 190:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 194:	ee 5f       	subi	r30, 0xFE	; 254
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	80 81       	ld	r24, Z
 19a:	08 2e       	mov	r0, r24
 19c:	00 0c       	add	r0, r0
 19e:	99 0b       	sbc	r25, r25
 1a0:	0e 94 13 01 	call	0x226	; 0x226 <putchar>
  	LEDs_PORT |= 0b00100000;
 1a4:	5d 9a       	sbi	0x0b, 5	; 11
	i=1;
 1a6:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__data_start+0x1>
 1aa:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e7       	ldi	r25, 0x70	; 112
 1b2:	22 e0       	ldi	r18, 0x02	; 2
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	20 40       	sbci	r18, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0xce>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0xd8>
 1be:	00 00       	nop
    	_delay_ms(50);
	LEDs_PORT &= 0b00000000;
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	1b b8       	out	0x0b, r1	; 11
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	cc cf       	rjmp	.-104    	; 0x160 <main+0x7a>
  	LEDs_PORT |= 0b10000000;
	i*=2;
    	_delay_ms(75);
	LEDs_PORT &= 0b00000000;
      } else if (pressed>=3){
  	LEDs_PORT |= 0b01000000;
 1c8:	5e 9a       	sbi	0x0b, 6	; 11
	i=i*2+1;
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1e0:	9f e7       	ldi	r25, 0x7F	; 127
 1e2:	29 ea       	ldi	r18, 0xA9	; 169
 1e4:	33 e0       	ldi	r19, 0x03	; 3
 1e6:	91 50       	subi	r25, 0x01	; 1
 1e8:	20 40       	sbci	r18, 0x00	; 0
 1ea:	30 40       	sbci	r19, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x100>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x10a>
 1f0:	00 00       	nop
    	_delay_ms(75);
	LEDs_PORT &= 0b00000000;
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	1b b8       	out	0x0b, r1	; 11
 1f6:	c6 cf       	rjmp	.-116    	; 0x184 <main+0x9e>
      notpressed = 0;
      pressed++;
    } else {
      notpressed++;
      if(pressed<3&&pressed>0){
  	LEDs_PORT |= 0b10000000;
 1f8:	5f 9a       	sbi	0x0b, 7	; 11
	i*=2;
 1fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 20e:	2f e7       	ldi	r18, 0x7F	; 127
 210:	39 ea       	ldi	r19, 0xA9	; 169
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	21 50       	subi	r18, 0x01	; 1
 216:	30 40       	sbci	r19, 0x00	; 0
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x12e>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x138>
 21e:	00 00       	nop
    	_delay_ms(75);
	LEDs_PORT &= 0b00000000;
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	1b b8       	out	0x0b, r1	; 11
 224:	af cf       	rjmp	.-162    	; 0x184 <main+0x9e>

00000226 <putchar>:
 226:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <__iob+0x2>
 22a:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <__iob+0x3>
 22e:	0e 94 1a 01 	call	0x234	; 0x234 <fputc>
 232:	08 95       	ret

00000234 <fputc>:
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	fb 01       	movw	r30, r22
 23e:	23 81       	ldd	r18, Z+3	; 0x03
 240:	21 fd       	sbrc	r18, 1
 242:	03 c0       	rjmp	.+6      	; 0x24a <fputc+0x16>
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	9f ef       	ldi	r25, 0xFF	; 255
 248:	2c c0       	rjmp	.+88     	; 0x2a2 <fputc+0x6e>
 24a:	22 ff       	sbrs	r18, 2
 24c:	16 c0       	rjmp	.+44     	; 0x27a <fputc+0x46>
 24e:	46 81       	ldd	r20, Z+6	; 0x06
 250:	57 81       	ldd	r21, Z+7	; 0x07
 252:	24 81       	ldd	r18, Z+4	; 0x04
 254:	35 81       	ldd	r19, Z+5	; 0x05
 256:	42 17       	cp	r20, r18
 258:	53 07       	cpc	r21, r19
 25a:	44 f4       	brge	.+16     	; 0x26c <fputc+0x38>
 25c:	a0 81       	ld	r26, Z
 25e:	b1 81       	ldd	r27, Z+1	; 0x01
 260:	9d 01       	movw	r18, r26
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	31 83       	std	Z+1, r19	; 0x01
 268:	20 83       	st	Z, r18
 26a:	8c 93       	st	X, r24
 26c:	26 81       	ldd	r18, Z+6	; 0x06
 26e:	37 81       	ldd	r19, Z+7	; 0x07
 270:	2f 5f       	subi	r18, 0xFF	; 255
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	37 83       	std	Z+7, r19	; 0x07
 276:	26 83       	std	Z+6, r18	; 0x06
 278:	14 c0       	rjmp	.+40     	; 0x2a2 <fputc+0x6e>
 27a:	8b 01       	movw	r16, r22
 27c:	ec 01       	movw	r28, r24
 27e:	fb 01       	movw	r30, r22
 280:	00 84       	ldd	r0, Z+8	; 0x08
 282:	f1 85       	ldd	r31, Z+9	; 0x09
 284:	e0 2d       	mov	r30, r0
 286:	09 95       	icall
 288:	89 2b       	or	r24, r25
 28a:	e1 f6       	brne	.-72     	; 0x244 <fputc+0x10>
 28c:	d8 01       	movw	r26, r16
 28e:	16 96       	adiw	r26, 0x06	; 6
 290:	8d 91       	ld	r24, X+
 292:	9c 91       	ld	r25, X
 294:	17 97       	sbiw	r26, 0x07	; 7
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	17 96       	adiw	r26, 0x07	; 7
 29a:	9c 93       	st	X, r25
 29c:	8e 93       	st	-X, r24
 29e:	16 97       	sbiw	r26, 0x06	; 6
 2a0:	ce 01       	movw	r24, r28
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
