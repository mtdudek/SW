
eeprom_i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  00000954  000009e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080022a  0080022a  00000b12  2**0
                  ALLOC
  3 .stab         00000e58  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f3f  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000028ab  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003492  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  9e:	0c 94 a8 04 	jmp	0x950	; 0x950 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
  // czekaj aż transmiter gotowy
  while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
  return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
  d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e4:	08 95       	ret

000000e6 <i2cInit>:
#include "i2c.h"
void i2cInit() {
  // ustaw bitrate
  // 8MHz / (16+2*TWBR*1) ~= 100kHz
  TWBR = 32;
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  // uruchom TWI
  TWCR |= _BV(TWEN);
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <i2cWaitForComplete>:
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
  f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  fc:	87 ff       	sbrs	r24, 7
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <i2cWaitForComplete>
}
 100:	08 95       	ret

00000102 <i2cStart>:
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
 102:	84 ea       	ldi	r24, 0xA4	; 164
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 108:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 10c:	87 ff       	sbrs	r24, 7
 10e:	fc cf       	rjmp	.-8      	; 0x108 <i2cStart+0x6>
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
 110:	08 95       	ret

00000112 <i2cStop>:
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 112:	84 e9       	ldi	r24, 0x94	; 148
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 118:	08 95       	ret

0000011a <i2cReset>:
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 11a:	80 e9       	ldi	r24, 0x90	; 144
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 120:	08 95       	ret

00000122 <i2cReadAck>:
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 122:	84 ec       	ldi	r24, 0xC4	; 196
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 128:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 12c:	87 ff       	sbrs	r24, 7
 12e:	fc cf       	rjmp	.-8      	; 0x128 <i2cReadAck+0x6>
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  i2cWaitForComplete();
  return TWDR;
 130:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 134:	08 95       	ret

00000136 <i2cReadNoAck>:
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
 136:	84 e8       	ldi	r24, 0x84	; 132
 138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 13c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 140:	87 ff       	sbrs	r24, 7
 142:	fc cf       	rjmp	.-8      	; 0x13c <i2cReadNoAck+0x6>
}
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
  i2cWaitForComplete();
  return TWDR;
 144:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 148:	08 95       	ret

0000014a <i2cSend>:
 14a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 154:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 158:	87 ff       	sbrs	r24, 7
 15a:	fc cf       	rjmp	.-8      	; 0x154 <i2cSend+0xa>
 15c:	08 95       	ret

0000015e <main>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
 15e:	87 e6       	ldi	r24, 0x67	; 103
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 166:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
 16a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 16e:	88 e1       	ldi	r24, 0x18	; 24
 170:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
int main()
{
  // zainicjalizuj UART
  uart_init();
  // skonfiguruj strumienie wejścia/wyjścia
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 17a:	8a e2       	ldi	r24, 0x2A	; 42
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	23 e5       	ldi	r18, 0x53	; 83
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <__data_end+0x9>
 186:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <__data_end+0x8>
 18a:	2c e5       	ldi	r18, 0x5C	; 92
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <__data_end+0xb>
 192:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <__data_end+0xa>
 196:	23 e0       	ldi	r18, 0x03	; 3
 198:	20 93 2d 02 	sts	0x022D, r18	; 0x80022d <__data_end+0x3>
 19c:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <__data_end+0xd>
 1a0:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <__data_end+0xc>
  stdin = stdout = stderr = &uart_file;
 1a4:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <__iob+0x5>
 1a8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__iob+0x4>
 1ac:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <__iob+0x3>
 1b0:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <__iob+0x2>
 1b4:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <__iob+0x1>
 1b8:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <__iob>
  // zainicjalizuj I2C
  i2cInit();
 1bc:	0e 94 73 00 	call	0xe6	; 0xe6 <i2cInit>
  // program testowy
  uint16_t addr = 0;
 1c0:	81 2c       	mov	r8, r1
 1c2:	91 2c       	mov	r9, r1
 1c4:	c1 2c       	mov	r12, r1
 1c6:	d1 2c       	mov	r13, r1
    i2cStart();
    i2cCheck(0x10, "I2C second start")
    i2cSend(eeprom_addr | 0x1 | ((addr & 0x100) >> 7));
    i2cCheck(0x40, "I2C EEPROM read request")
    uint8_t data = i2cReadNoAck();
    i2cCheck(0x58, "I2C EEPROM read")
 1c8:	97 ed       	ldi	r25, 0xD7	; 215
 1ca:	29 2e       	mov	r2, r25
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	39 2e       	mov	r3, r25
    i2cSend(addr & 0xff);
    i2cCheck(0x28, "I2C EEPROM set address")
    i2cStart();
    i2cCheck(0x10, "I2C second start")
    i2cSend(eeprom_addr | 0x1 | ((addr & 0x100) >> 7));
    i2cCheck(0x40, "I2C EEPROM read request")
 1d0:	28 ea       	ldi	r18, 0xA8	; 168
 1d2:	42 2e       	mov	r4, r18
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	52 2e       	mov	r5, r18
    i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
    i2cCheck(0x18, "I2C EEPROM write request")
    i2cSend(addr & 0xff);
    i2cCheck(0x28, "I2C EEPROM set address")
    i2cStart();
    i2cCheck(0x10, "I2C second start")
 1d8:	30 e8       	ldi	r19, 0x80	; 128
 1da:	63 2e       	mov	r6, r19
 1dc:	31 e0       	ldi	r19, 0x01	; 1
 1de:	73 2e       	mov	r7, r19
    i2cStart();
    i2cCheck(0x08, "I2C start")
    i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
    i2cCheck(0x18, "I2C EEPROM write request")
    i2cSend(addr & 0xff);
    i2cCheck(0x28, "I2C EEPROM set address")
 1e0:	42 e5       	ldi	r20, 0x52	; 82
 1e2:	a4 2e       	mov	r10, r20
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	b4 2e       	mov	r11, r20
    }
  while(1) {
    i2cStart();
    i2cCheck(0x08, "I2C start")
    i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
    i2cCheck(0x18, "I2C EEPROM write request")
 1e8:	52 e2       	ldi	r21, 0x22	; 34
 1ea:	e5 2e       	mov	r14, r21
 1ec:	51 e0       	ldi	r21, 0x01	; 1
 1ee:	f5 2e       	mov	r15, r21
      i2cReset(); \
      continue; \
    }
  while(1) {
    i2cStart();
    i2cCheck(0x08, "I2C start")
 1f0:	c1 e0       	ldi	r28, 0x01	; 1
 1f2:	d1 e0       	ldi	r29, 0x01	; 1
      printf(msg " failed, status: %.2x\r\n", TWSR & 0xf8); \
      i2cReset(); \
      continue; \
    }
  while(1) {
    i2cStart();
 1f4:	0e 94 81 00 	call	0x102	; 0x102 <i2cStart>
    i2cCheck(0x08, "I2C start")
 1f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1fc:	88 7f       	andi	r24, 0xF8	; 248
 1fe:	88 30       	cpi	r24, 0x08	; 8
 200:	b1 f0       	breq	.+44     	; 0x22e <main+0xd0>
 202:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 206:	88 7f       	andi	r24, 0xF8	; 248
 208:	1f 92       	push	r1
 20a:	8f 93       	push	r24
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	0e 94 ca 01 	call	0x394	; 0x394 <printf>
 214:	0e 94 8d 00 	call	0x11a	; 0x11a <i2cReset>
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
      printf(msg " failed, status: %.2x\r\n", TWSR & 0xf8); \
      i2cReset(); \
      continue; \
    }
  while(1) {
    i2cStart();
 220:	0e 94 81 00 	call	0x102	; 0x102 <i2cStart>
    i2cCheck(0x08, "I2C start")
 224:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 228:	88 7f       	andi	r24, 0xF8	; 248
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	51 f7       	brne	.-44     	; 0x202 <main+0xa4>
    i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
 22e:	86 01       	movw	r16, r12
 230:	00 0f       	add	r16, r16
 232:	01 2f       	mov	r16, r17
 234:	00 1f       	adc	r16, r16
 236:	11 0b       	sbc	r17, r17
 238:	11 95       	neg	r17
 23a:	80 2f       	mov	r24, r16
 23c:	80 6a       	ori	r24, 0xA0	; 160
 23e:	0e 94 a5 00 	call	0x14a	; 0x14a <i2cSend>
    i2cCheck(0x18, "I2C EEPROM write request")
 242:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 246:	88 7f       	andi	r24, 0xF8	; 248
 248:	88 31       	cpi	r24, 0x18	; 24
 24a:	81 f0       	breq	.+32     	; 0x26c <main+0x10e>
 24c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 250:	88 7f       	andi	r24, 0xF8	; 248
 252:	1f 92       	push	r1
 254:	8f 93       	push	r24
 256:	ff 92       	push	r15
 258:	ef 92       	push	r14
 25a:	0e 94 ca 01 	call	0x394	; 0x394 <printf>
 25e:	0e 94 8d 00 	call	0x11a	; 0x11a <i2cReset>
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	c4 cf       	rjmp	.-120    	; 0x1f4 <main+0x96>
    i2cSend(addr & 0xff);
 26c:	88 2d       	mov	r24, r8
 26e:	0e 94 a5 00 	call	0x14a	; 0x14a <i2cSend>
    i2cCheck(0x28, "I2C EEPROM set address")
 272:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 276:	88 7f       	andi	r24, 0xF8	; 248
 278:	88 32       	cpi	r24, 0x28	; 40
 27a:	81 f0       	breq	.+32     	; 0x29c <main+0x13e>
 27c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 280:	88 7f       	andi	r24, 0xF8	; 248
 282:	1f 92       	push	r1
 284:	8f 93       	push	r24
 286:	bf 92       	push	r11
 288:	af 92       	push	r10
 28a:	0e 94 ca 01 	call	0x394	; 0x394 <printf>
 28e:	0e 94 8d 00 	call	0x11a	; 0x11a <i2cReset>
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	ac cf       	rjmp	.-168    	; 0x1f4 <main+0x96>
    i2cStart();
 29c:	0e 94 81 00 	call	0x102	; 0x102 <i2cStart>
    i2cCheck(0x10, "I2C second start")
 2a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2a4:	88 7f       	andi	r24, 0xF8	; 248
 2a6:	80 31       	cpi	r24, 0x10	; 16
 2a8:	81 f0       	breq	.+32     	; 0x2ca <main+0x16c>
 2aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2ae:	88 7f       	andi	r24, 0xF8	; 248
 2b0:	1f 92       	push	r1
 2b2:	8f 93       	push	r24
 2b4:	7f 92       	push	r7
 2b6:	6f 92       	push	r6
 2b8:	0e 94 ca 01 	call	0x394	; 0x394 <printf>
 2bc:	0e 94 8d 00 	call	0x11a	; 0x11a <i2cReset>
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	95 cf       	rjmp	.-214    	; 0x1f4 <main+0x96>
    i2cSend(eeprom_addr | 0x1 | ((addr & 0x100) >> 7));
 2ca:	80 2f       	mov	r24, r16
 2cc:	81 6a       	ori	r24, 0xA1	; 161
 2ce:	0e 94 a5 00 	call	0x14a	; 0x14a <i2cSend>
    i2cCheck(0x40, "I2C EEPROM read request")
 2d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2d6:	88 7f       	andi	r24, 0xF8	; 248
 2d8:	80 34       	cpi	r24, 0x40	; 64
 2da:	81 f0       	breq	.+32     	; 0x2fc <main+0x19e>
 2dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2e0:	88 7f       	andi	r24, 0xF8	; 248
 2e2:	1f 92       	push	r1
 2e4:	8f 93       	push	r24
 2e6:	5f 92       	push	r5
 2e8:	4f 92       	push	r4
 2ea:	0e 94 ca 01 	call	0x394	; 0x394 <printf>
 2ee:	0e 94 8d 00 	call	0x11a	; 0x11a <i2cReset>
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	7c cf       	rjmp	.-264    	; 0x1f4 <main+0x96>
    uint8_t data = i2cReadNoAck();
 2fc:	0e 94 9b 00 	call	0x136	; 0x136 <i2cReadNoAck>
 300:	18 2f       	mov	r17, r24
    i2cCheck(0x58, "I2C EEPROM read")
 302:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 306:	88 7f       	andi	r24, 0xF8	; 248
 308:	88 35       	cpi	r24, 0x58	; 88
 30a:	81 f0       	breq	.+32     	; 0x32c <main+0x1ce>
 30c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 310:	88 7f       	andi	r24, 0xF8	; 248
 312:	1f 92       	push	r1
 314:	8f 93       	push	r24
 316:	3f 92       	push	r3
 318:	2f 92       	push	r2
 31a:	0e 94 ca 01 	call	0x394	; 0x394 <printf>
 31e:	0e 94 8d 00 	call	0x11a	; 0x11a <i2cReset>
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	64 cf       	rjmp	.-312    	; 0x1f4 <main+0x96>
    i2cStop();
 32c:	0e 94 89 00 	call	0x112	; 0x112 <i2cStop>
    i2cCheck(0xf8, "I2C stop")
 330:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 334:	88 7f       	andi	r24, 0xF8	; 248
 336:	88 3f       	cpi	r24, 0xF8	; 248
 338:	91 f0       	breq	.+36     	; 0x35e <main+0x200>
 33a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 33e:	88 7f       	andi	r24, 0xF8	; 248
 340:	1f 92       	push	r1
 342:	8f 93       	push	r24
 344:	8e ef       	ldi	r24, 0xFE	; 254
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	9f 93       	push	r25
 34a:	8f 93       	push	r24
 34c:	0e 94 ca 01 	call	0x394	; 0x394 <printf>
 350:	0e 94 8d 00 	call	0x11a	; 0x11a <i2cReset>
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	4b cf       	rjmp	.-362    	; 0x1f4 <main+0x96>
    printf("%.3x: %x\r\n", addr, data);
 35e:	1f 92       	push	r1
 360:	1f 93       	push	r17
 362:	9f 92       	push	r9
 364:	8f 92       	push	r8
 366:	8e e1       	ldi	r24, 0x1E	; 30
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	9f 93       	push	r25
 36c:	8f 93       	push	r24
 36e:	0e 94 ca 01 	call	0x394	; 0x394 <printf>
    addr++;
 372:	64 01       	movw	r12, r8
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	c8 1a       	sub	r12, r24
 378:	d8 0a       	sbc	r13, r24
    addr &= 0x1ff;
 37a:	46 01       	movw	r8, r12
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	99 22       	and	r9, r25
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	cc 24       	eor	r12, r12
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	d2 22       	and	r13, r18
 392:	30 cf       	rjmp	.-416    	; 0x1f4 <main+0x96>

00000394 <printf>:
 394:	a0 e0       	ldi	r26, 0x00	; 0
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	e0 ed       	ldi	r30, 0xD0	; 208
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	0c 94 81 04 	jmp	0x902	; 0x902 <__stack+0x3>
 3a0:	ae 01       	movw	r20, r28
 3a2:	4b 5f       	subi	r20, 0xFB	; 251
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	fa 01       	movw	r30, r20
 3a8:	61 91       	ld	r22, Z+
 3aa:	71 91       	ld	r23, Z+
 3ac:	af 01       	movw	r20, r30
 3ae:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <__iob+0x2>
 3b2:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <__iob+0x3>
 3b6:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <vfprintf>
 3ba:	e2 e0       	ldi	r30, 0x02	; 2
 3bc:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__epilogue_restores__+0x20>

000003c0 <vfprintf>:
 3c0:	ab e0       	ldi	r26, 0x0B	; 11
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	e6 ee       	ldi	r30, 0xE6	; 230
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__prologue_saves__>
 3cc:	6c 01       	movw	r12, r24
 3ce:	7b 01       	movw	r14, r22
 3d0:	8a 01       	movw	r16, r20
 3d2:	fc 01       	movw	r30, r24
 3d4:	17 82       	std	Z+7, r1	; 0x07
 3d6:	16 82       	std	Z+6, r1	; 0x06
 3d8:	83 81       	ldd	r24, Z+3	; 0x03
 3da:	81 ff       	sbrs	r24, 1
 3dc:	cc c1       	rjmp	.+920    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	3c 01       	movw	r6, r24
 3e4:	f6 01       	movw	r30, r12
 3e6:	93 81       	ldd	r25, Z+3	; 0x03
 3e8:	f7 01       	movw	r30, r14
 3ea:	93 fd       	sbrc	r25, 3
 3ec:	85 91       	lpm	r24, Z+
 3ee:	93 ff       	sbrs	r25, 3
 3f0:	81 91       	ld	r24, Z+
 3f2:	7f 01       	movw	r14, r30
 3f4:	88 23       	and	r24, r24
 3f6:	09 f4       	brne	.+2      	; 0x3fa <vfprintf+0x3a>
 3f8:	ba c1       	rjmp	.+884    	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 3fa:	85 32       	cpi	r24, 0x25	; 37
 3fc:	39 f4       	brne	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	93 fd       	sbrc	r25, 3
 400:	85 91       	lpm	r24, Z+
 402:	93 ff       	sbrs	r25, 3
 404:	81 91       	ld	r24, Z+
 406:	7f 01       	movw	r14, r30
 408:	85 32       	cpi	r24, 0x25	; 37
 40a:	29 f4       	brne	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40c:	b6 01       	movw	r22, r12
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
 414:	e7 cf       	rjmp	.-50     	; 0x3e4 <vfprintf+0x24>
 416:	91 2c       	mov	r9, r1
 418:	21 2c       	mov	r2, r1
 41a:	31 2c       	mov	r3, r1
 41c:	ff e1       	ldi	r31, 0x1F	; 31
 41e:	f3 15       	cp	r31, r3
 420:	d8 f0       	brcs	.+54     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 422:	8b 32       	cpi	r24, 0x2B	; 43
 424:	79 f0       	breq	.+30     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 426:	38 f4       	brcc	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 428:	80 32       	cpi	r24, 0x20	; 32
 42a:	79 f0       	breq	.+30     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42c:	83 32       	cpi	r24, 0x23	; 35
 42e:	a1 f4       	brne	.+40     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 430:	23 2d       	mov	r18, r3
 432:	20 61       	ori	r18, 0x10	; 16
 434:	1d c0       	rjmp	.+58     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 436:	8d 32       	cpi	r24, 0x2D	; 45
 438:	61 f0       	breq	.+24     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 43a:	80 33       	cpi	r24, 0x30	; 48
 43c:	69 f4       	brne	.+26     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 43e:	23 2d       	mov	r18, r3
 440:	21 60       	ori	r18, 0x01	; 1
 442:	16 c0       	rjmp	.+44     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 444:	83 2d       	mov	r24, r3
 446:	82 60       	ori	r24, 0x02	; 2
 448:	38 2e       	mov	r3, r24
 44a:	e3 2d       	mov	r30, r3
 44c:	e4 60       	ori	r30, 0x04	; 4
 44e:	3e 2e       	mov	r3, r30
 450:	2a c0       	rjmp	.+84     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 452:	f3 2d       	mov	r31, r3
 454:	f8 60       	ori	r31, 0x08	; 8
 456:	1d c0       	rjmp	.+58     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 458:	37 fc       	sbrc	r3, 7
 45a:	2d c0       	rjmp	.+90     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 45c:	20 ed       	ldi	r18, 0xD0	; 208
 45e:	28 0f       	add	r18, r24
 460:	2a 30       	cpi	r18, 0x0A	; 10
 462:	40 f0       	brcs	.+16     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 464:	8e 32       	cpi	r24, 0x2E	; 46
 466:	b9 f4       	brne	.+46     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 468:	36 fc       	sbrc	r3, 6
 46a:	81 c1       	rjmp	.+770    	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 46c:	23 2d       	mov	r18, r3
 46e:	20 64       	ori	r18, 0x40	; 64
 470:	32 2e       	mov	r3, r18
 472:	19 c0       	rjmp	.+50     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 474:	36 fe       	sbrs	r3, 6
 476:	06 c0       	rjmp	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 478:	8a e0       	ldi	r24, 0x0A	; 10
 47a:	98 9e       	mul	r9, r24
 47c:	20 0d       	add	r18, r0
 47e:	11 24       	eor	r1, r1
 480:	92 2e       	mov	r9, r18
 482:	11 c0       	rjmp	.+34     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 484:	ea e0       	ldi	r30, 0x0A	; 10
 486:	2e 9e       	mul	r2, r30
 488:	20 0d       	add	r18, r0
 48a:	11 24       	eor	r1, r1
 48c:	22 2e       	mov	r2, r18
 48e:	f3 2d       	mov	r31, r3
 490:	f0 62       	ori	r31, 0x20	; 32
 492:	3f 2e       	mov	r3, r31
 494:	08 c0       	rjmp	.+16     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 496:	8c 36       	cpi	r24, 0x6C	; 108
 498:	21 f4       	brne	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49a:	83 2d       	mov	r24, r3
 49c:	80 68       	ori	r24, 0x80	; 128
 49e:	38 2e       	mov	r3, r24
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	88 36       	cpi	r24, 0x68	; 104
 4a4:	41 f4       	brne	.+16     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4a6:	f7 01       	movw	r30, r14
 4a8:	93 fd       	sbrc	r25, 3
 4aa:	85 91       	lpm	r24, Z+
 4ac:	93 ff       	sbrs	r25, 3
 4ae:	81 91       	ld	r24, Z+
 4b0:	7f 01       	movw	r14, r30
 4b2:	81 11       	cpse	r24, r1
 4b4:	b3 cf       	rjmp	.-154    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 4b6:	98 2f       	mov	r25, r24
 4b8:	9f 7d       	andi	r25, 0xDF	; 223
 4ba:	95 54       	subi	r25, 0x45	; 69
 4bc:	93 30       	cpi	r25, 0x03	; 3
 4be:	28 f4       	brcc	.+10     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c0:	0c 5f       	subi	r16, 0xFC	; 252
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	9f e3       	ldi	r25, 0x3F	; 63
 4c6:	99 83       	std	Y+1, r25	; 0x01
 4c8:	0d c0       	rjmp	.+26     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ca:	83 36       	cpi	r24, 0x63	; 99
 4cc:	31 f0       	breq	.+12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ce:	83 37       	cpi	r24, 0x73	; 115
 4d0:	71 f0       	breq	.+28     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4d2:	83 35       	cpi	r24, 0x53	; 83
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d6:	59 c0       	rjmp	.+178    	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 4d8:	21 c0       	rjmp	.+66     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 4da:	f8 01       	movw	r30, r16
 4dc:	80 81       	ld	r24, Z
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	0e 5f       	subi	r16, 0xFE	; 254
 4e2:	1f 4f       	sbci	r17, 0xFF	; 255
 4e4:	88 24       	eor	r8, r8
 4e6:	83 94       	inc	r8
 4e8:	91 2c       	mov	r9, r1
 4ea:	53 01       	movw	r10, r6
 4ec:	13 c0       	rjmp	.+38     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4ee:	28 01       	movw	r4, r16
 4f0:	f2 e0       	ldi	r31, 0x02	; 2
 4f2:	4f 0e       	add	r4, r31
 4f4:	51 1c       	adc	r5, r1
 4f6:	f8 01       	movw	r30, r16
 4f8:	a0 80       	ld	r10, Z
 4fa:	b1 80       	ldd	r11, Z+1	; 0x01
 4fc:	36 fe       	sbrs	r3, 6
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 500:	69 2d       	mov	r22, r9
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 506:	6f ef       	ldi	r22, 0xFF	; 255
 508:	7f ef       	ldi	r23, 0xFF	; 255
 50a:	c5 01       	movw	r24, r10
 50c:	0e 94 cc 03 	call	0x798	; 0x798 <strnlen>
 510:	4c 01       	movw	r8, r24
 512:	82 01       	movw	r16, r4
 514:	f3 2d       	mov	r31, r3
 516:	ff 77       	andi	r31, 0x7F	; 127
 518:	3f 2e       	mov	r3, r31
 51a:	16 c0       	rjmp	.+44     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 51c:	28 01       	movw	r4, r16
 51e:	22 e0       	ldi	r18, 0x02	; 2
 520:	42 0e       	add	r4, r18
 522:	51 1c       	adc	r5, r1
 524:	f8 01       	movw	r30, r16
 526:	a0 80       	ld	r10, Z
 528:	b1 80       	ldd	r11, Z+1	; 0x01
 52a:	36 fe       	sbrs	r3, 6
 52c:	03 c0       	rjmp	.+6      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 52e:	69 2d       	mov	r22, r9
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 534:	6f ef       	ldi	r22, 0xFF	; 255
 536:	7f ef       	ldi	r23, 0xFF	; 255
 538:	c5 01       	movw	r24, r10
 53a:	0e 94 c1 03 	call	0x782	; 0x782 <strnlen_P>
 53e:	4c 01       	movw	r8, r24
 540:	f3 2d       	mov	r31, r3
 542:	f0 68       	ori	r31, 0x80	; 128
 544:	3f 2e       	mov	r3, r31
 546:	82 01       	movw	r16, r4
 548:	33 fc       	sbrc	r3, 3
 54a:	1b c0       	rjmp	.+54     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 54c:	82 2d       	mov	r24, r2
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	88 16       	cp	r8, r24
 552:	99 06       	cpc	r9, r25
 554:	b0 f4       	brcc	.+44     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 556:	b6 01       	movw	r22, r12
 558:	80 e2       	ldi	r24, 0x20	; 32
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
 560:	2a 94       	dec	r2
 562:	f4 cf       	rjmp	.-24     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 564:	f5 01       	movw	r30, r10
 566:	37 fc       	sbrc	r3, 7
 568:	85 91       	lpm	r24, Z+
 56a:	37 fe       	sbrs	r3, 7
 56c:	81 91       	ld	r24, Z+
 56e:	5f 01       	movw	r10, r30
 570:	b6 01       	movw	r22, r12
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
 578:	21 10       	cpse	r2, r1
 57a:	2a 94       	dec	r2
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	82 1a       	sub	r8, r18
 580:	91 08       	sbc	r9, r1
 582:	81 14       	cp	r8, r1
 584:	91 04       	cpc	r9, r1
 586:	71 f7       	brne	.-36     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 588:	e8 c0       	rjmp	.+464    	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
 58a:	84 36       	cpi	r24, 0x64	; 100
 58c:	11 f0       	breq	.+4      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 58e:	89 36       	cpi	r24, 0x69	; 105
 590:	41 f5       	brne	.+80     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 592:	f8 01       	movw	r30, r16
 594:	37 fe       	sbrs	r3, 7
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 598:	60 81       	ld	r22, Z
 59a:	71 81       	ldd	r23, Z+1	; 0x01
 59c:	82 81       	ldd	r24, Z+2	; 0x02
 59e:	93 81       	ldd	r25, Z+3	; 0x03
 5a0:	0c 5f       	subi	r16, 0xFC	; 252
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5a6:	60 81       	ld	r22, Z
 5a8:	71 81       	ldd	r23, Z+1	; 0x01
 5aa:	07 2e       	mov	r0, r23
 5ac:	00 0c       	add	r0, r0
 5ae:	88 0b       	sbc	r24, r24
 5b0:	99 0b       	sbc	r25, r25
 5b2:	0e 5f       	subi	r16, 0xFE	; 254
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
 5b6:	f3 2d       	mov	r31, r3
 5b8:	ff 76       	andi	r31, 0x6F	; 111
 5ba:	3f 2e       	mov	r3, r31
 5bc:	97 ff       	sbrs	r25, 7
 5be:	09 c0       	rjmp	.+18     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5c0:	90 95       	com	r25
 5c2:	80 95       	com	r24
 5c4:	70 95       	com	r23
 5c6:	61 95       	neg	r22
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	8f 4f       	sbci	r24, 0xFF	; 255
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	f0 68       	ori	r31, 0x80	; 128
 5d0:	3f 2e       	mov	r3, r31
 5d2:	2a e0       	ldi	r18, 0x0A	; 10
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	a3 01       	movw	r20, r6
 5d8:	0e 94 13 04 	call	0x826	; 0x826 <__ultoa_invert>
 5dc:	88 2e       	mov	r8, r24
 5de:	86 18       	sub	r8, r6
 5e0:	45 c0       	rjmp	.+138    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 5e2:	85 37       	cpi	r24, 0x75	; 117
 5e4:	31 f4       	brne	.+12     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5e6:	23 2d       	mov	r18, r3
 5e8:	2f 7e       	andi	r18, 0xEF	; 239
 5ea:	b2 2e       	mov	r11, r18
 5ec:	2a e0       	ldi	r18, 0x0A	; 10
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	25 c0       	rjmp	.+74     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 5f2:	93 2d       	mov	r25, r3
 5f4:	99 7f       	andi	r25, 0xF9	; 249
 5f6:	b9 2e       	mov	r11, r25
 5f8:	8f 36       	cpi	r24, 0x6F	; 111
 5fa:	c1 f0       	breq	.+48     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 5fc:	18 f4       	brcc	.+6      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5fe:	88 35       	cpi	r24, 0x58	; 88
 600:	79 f0       	breq	.+30     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 602:	b5 c0       	rjmp	.+362    	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 604:	80 37       	cpi	r24, 0x70	; 112
 606:	19 f0       	breq	.+6      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 608:	88 37       	cpi	r24, 0x78	; 120
 60a:	21 f0       	breq	.+8      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 60c:	b0 c0       	rjmp	.+352    	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 60e:	e9 2f       	mov	r30, r25
 610:	e0 61       	ori	r30, 0x10	; 16
 612:	be 2e       	mov	r11, r30
 614:	b4 fe       	sbrs	r11, 4
 616:	0d c0       	rjmp	.+26     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 618:	fb 2d       	mov	r31, r11
 61a:	f4 60       	ori	r31, 0x04	; 4
 61c:	bf 2e       	mov	r11, r31
 61e:	09 c0       	rjmp	.+18     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 620:	34 fe       	sbrs	r3, 4
 622:	0a c0       	rjmp	.+20     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 624:	29 2f       	mov	r18, r25
 626:	26 60       	ori	r18, 0x06	; 6
 628:	b2 2e       	mov	r11, r18
 62a:	06 c0       	rjmp	.+12     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 62c:	28 e0       	ldi	r18, 0x08	; 8
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	05 c0       	rjmp	.+10     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 632:	20 e1       	ldi	r18, 0x10	; 16
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 638:	20 e1       	ldi	r18, 0x10	; 16
 63a:	32 e0       	ldi	r19, 0x02	; 2
 63c:	f8 01       	movw	r30, r16
 63e:	b7 fe       	sbrs	r11, 7
 640:	07 c0       	rjmp	.+14     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 642:	60 81       	ld	r22, Z
 644:	71 81       	ldd	r23, Z+1	; 0x01
 646:	82 81       	ldd	r24, Z+2	; 0x02
 648:	93 81       	ldd	r25, Z+3	; 0x03
 64a:	0c 5f       	subi	r16, 0xFC	; 252
 64c:	1f 4f       	sbci	r17, 0xFF	; 255
 64e:	06 c0       	rjmp	.+12     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 650:	60 81       	ld	r22, Z
 652:	71 81       	ldd	r23, Z+1	; 0x01
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 5f       	subi	r16, 0xFE	; 254
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	a3 01       	movw	r20, r6
 65e:	0e 94 13 04 	call	0x826	; 0x826 <__ultoa_invert>
 662:	88 2e       	mov	r8, r24
 664:	86 18       	sub	r8, r6
 666:	fb 2d       	mov	r31, r11
 668:	ff 77       	andi	r31, 0x7F	; 127
 66a:	3f 2e       	mov	r3, r31
 66c:	36 fe       	sbrs	r3, 6
 66e:	0d c0       	rjmp	.+26     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 670:	23 2d       	mov	r18, r3
 672:	2e 7f       	andi	r18, 0xFE	; 254
 674:	a2 2e       	mov	r10, r18
 676:	89 14       	cp	r8, r9
 678:	58 f4       	brcc	.+22     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 67a:	34 fe       	sbrs	r3, 4
 67c:	0b c0       	rjmp	.+22     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 67e:	32 fc       	sbrc	r3, 2
 680:	09 c0       	rjmp	.+18     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 682:	83 2d       	mov	r24, r3
 684:	8e 7e       	andi	r24, 0xEE	; 238
 686:	a8 2e       	mov	r10, r24
 688:	05 c0       	rjmp	.+10     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 68a:	b8 2c       	mov	r11, r8
 68c:	a3 2c       	mov	r10, r3
 68e:	03 c0       	rjmp	.+6      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 690:	b8 2c       	mov	r11, r8
 692:	01 c0       	rjmp	.+2      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 694:	b9 2c       	mov	r11, r9
 696:	a4 fe       	sbrs	r10, 4
 698:	0f c0       	rjmp	.+30     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 69a:	fe 01       	movw	r30, r28
 69c:	e8 0d       	add	r30, r8
 69e:	f1 1d       	adc	r31, r1
 6a0:	80 81       	ld	r24, Z
 6a2:	80 33       	cpi	r24, 0x30	; 48
 6a4:	21 f4       	brne	.+8      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6a6:	9a 2d       	mov	r25, r10
 6a8:	99 7e       	andi	r25, 0xE9	; 233
 6aa:	a9 2e       	mov	r10, r25
 6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6ae:	a2 fe       	sbrs	r10, 2
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 6b2:	b3 94       	inc	r11
 6b4:	b3 94       	inc	r11
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6b8:	8a 2d       	mov	r24, r10
 6ba:	86 78       	andi	r24, 0x86	; 134
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6be:	b3 94       	inc	r11
 6c0:	a3 fc       	sbrc	r10, 3
 6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6c4:	a0 fe       	sbrs	r10, 0
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 6c8:	b2 14       	cp	r11, r2
 6ca:	88 f4       	brcc	.+34     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6cc:	28 0c       	add	r2, r8
 6ce:	92 2c       	mov	r9, r2
 6d0:	9b 18       	sub	r9, r11
 6d2:	0e c0       	rjmp	.+28     	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
 6d4:	b2 14       	cp	r11, r2
 6d6:	60 f4       	brcc	.+24     	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
 6d8:	b6 01       	movw	r22, r12
 6da:	80 e2       	ldi	r24, 0x20	; 32
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
 6e2:	b3 94       	inc	r11
 6e4:	f7 cf       	rjmp	.-18     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 6e6:	b2 14       	cp	r11, r2
 6e8:	18 f4       	brcc	.+6      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
 6ea:	2b 18       	sub	r2, r11
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6ee:	98 2c       	mov	r9, r8
 6f0:	21 2c       	mov	r2, r1
 6f2:	a4 fe       	sbrs	r10, 4
 6f4:	10 c0       	rjmp	.+32     	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
 6f6:	b6 01       	movw	r22, r12
 6f8:	80 e3       	ldi	r24, 0x30	; 48
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
 700:	a2 fe       	sbrs	r10, 2
 702:	17 c0       	rjmp	.+46     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 704:	a1 fc       	sbrc	r10, 1
 706:	03 c0       	rjmp	.+6      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 708:	88 e7       	ldi	r24, 0x78	; 120
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 70e:	88 e5       	ldi	r24, 0x58	; 88
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	b6 01       	movw	r22, r12
 714:	0c c0       	rjmp	.+24     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 716:	8a 2d       	mov	r24, r10
 718:	86 78       	andi	r24, 0x86	; 134
 71a:	59 f0       	breq	.+22     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 71c:	a1 fe       	sbrs	r10, 1
 71e:	02 c0       	rjmp	.+4      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 720:	8b e2       	ldi	r24, 0x2B	; 43
 722:	01 c0       	rjmp	.+2      	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 724:	80 e2       	ldi	r24, 0x20	; 32
 726:	a7 fc       	sbrc	r10, 7
 728:	8d e2       	ldi	r24, 0x2D	; 45
 72a:	b6 01       	movw	r22, r12
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
 732:	89 14       	cp	r8, r9
 734:	38 f4       	brcc	.+14     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 736:	b6 01       	movw	r22, r12
 738:	80 e3       	ldi	r24, 0x30	; 48
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
 740:	9a 94       	dec	r9
 742:	f7 cf       	rjmp	.-18     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 744:	8a 94       	dec	r8
 746:	f3 01       	movw	r30, r6
 748:	e8 0d       	add	r30, r8
 74a:	f1 1d       	adc	r31, r1
 74c:	80 81       	ld	r24, Z
 74e:	b6 01       	movw	r22, r12
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
 756:	81 10       	cpse	r8, r1
 758:	f5 cf       	rjmp	.-22     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 75a:	22 20       	and	r2, r2
 75c:	09 f4       	brne	.+2      	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
 75e:	42 ce       	rjmp	.-892    	; 0x3e4 <vfprintf+0x24>
 760:	b6 01       	movw	r22, r12
 762:	80 e2       	ldi	r24, 0x20	; 32
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
 76a:	2a 94       	dec	r2
 76c:	f6 cf       	rjmp	.-20     	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
 76e:	f6 01       	movw	r30, r12
 770:	86 81       	ldd	r24, Z+6	; 0x06
 772:	97 81       	ldd	r25, Z+7	; 0x07
 774:	02 c0       	rjmp	.+4      	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	9f ef       	ldi	r25, 0xFF	; 255
 77a:	2b 96       	adiw	r28, 0x0b	; 11
 77c:	e2 e1       	ldi	r30, 0x12	; 18
 77e:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__epilogue_restores__>

00000782 <strnlen_P>:
 782:	fc 01       	movw	r30, r24
 784:	05 90       	lpm	r0, Z+
 786:	61 50       	subi	r22, 0x01	; 1
 788:	70 40       	sbci	r23, 0x00	; 0
 78a:	01 10       	cpse	r0, r1
 78c:	d8 f7       	brcc	.-10     	; 0x784 <strnlen_P+0x2>
 78e:	80 95       	com	r24
 790:	90 95       	com	r25
 792:	8e 0f       	add	r24, r30
 794:	9f 1f       	adc	r25, r31
 796:	08 95       	ret

00000798 <strnlen>:
 798:	fc 01       	movw	r30, r24
 79a:	61 50       	subi	r22, 0x01	; 1
 79c:	70 40       	sbci	r23, 0x00	; 0
 79e:	01 90       	ld	r0, Z+
 7a0:	01 10       	cpse	r0, r1
 7a2:	d8 f7       	brcc	.-10     	; 0x79a <strnlen+0x2>
 7a4:	80 95       	com	r24
 7a6:	90 95       	com	r25
 7a8:	8e 0f       	add	r24, r30
 7aa:	9f 1f       	adc	r25, r31
 7ac:	08 95       	ret

000007ae <fputc>:
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	fb 01       	movw	r30, r22
 7b8:	23 81       	ldd	r18, Z+3	; 0x03
 7ba:	21 fd       	sbrc	r18, 1
 7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <fputc+0x16>
 7be:	8f ef       	ldi	r24, 0xFF	; 255
 7c0:	9f ef       	ldi	r25, 0xFF	; 255
 7c2:	2c c0       	rjmp	.+88     	; 0x81c <fputc+0x6e>
 7c4:	22 ff       	sbrs	r18, 2
 7c6:	16 c0       	rjmp	.+44     	; 0x7f4 <fputc+0x46>
 7c8:	46 81       	ldd	r20, Z+6	; 0x06
 7ca:	57 81       	ldd	r21, Z+7	; 0x07
 7cc:	24 81       	ldd	r18, Z+4	; 0x04
 7ce:	35 81       	ldd	r19, Z+5	; 0x05
 7d0:	42 17       	cp	r20, r18
 7d2:	53 07       	cpc	r21, r19
 7d4:	44 f4       	brge	.+16     	; 0x7e6 <fputc+0x38>
 7d6:	a0 81       	ld	r26, Z
 7d8:	b1 81       	ldd	r27, Z+1	; 0x01
 7da:	9d 01       	movw	r18, r26
 7dc:	2f 5f       	subi	r18, 0xFF	; 255
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	31 83       	std	Z+1, r19	; 0x01
 7e2:	20 83       	st	Z, r18
 7e4:	8c 93       	st	X, r24
 7e6:	26 81       	ldd	r18, Z+6	; 0x06
 7e8:	37 81       	ldd	r19, Z+7	; 0x07
 7ea:	2f 5f       	subi	r18, 0xFF	; 255
 7ec:	3f 4f       	sbci	r19, 0xFF	; 255
 7ee:	37 83       	std	Z+7, r19	; 0x07
 7f0:	26 83       	std	Z+6, r18	; 0x06
 7f2:	14 c0       	rjmp	.+40     	; 0x81c <fputc+0x6e>
 7f4:	8b 01       	movw	r16, r22
 7f6:	ec 01       	movw	r28, r24
 7f8:	fb 01       	movw	r30, r22
 7fa:	00 84       	ldd	r0, Z+8	; 0x08
 7fc:	f1 85       	ldd	r31, Z+9	; 0x09
 7fe:	e0 2d       	mov	r30, r0
 800:	09 95       	icall
 802:	89 2b       	or	r24, r25
 804:	e1 f6       	brne	.-72     	; 0x7be <fputc+0x10>
 806:	d8 01       	movw	r26, r16
 808:	16 96       	adiw	r26, 0x06	; 6
 80a:	8d 91       	ld	r24, X+
 80c:	9c 91       	ld	r25, X
 80e:	17 97       	sbiw	r26, 0x07	; 7
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	17 96       	adiw	r26, 0x07	; 7
 814:	9c 93       	st	X, r25
 816:	8e 93       	st	-X, r24
 818:	16 97       	sbiw	r26, 0x06	; 6
 81a:	ce 01       	movw	r24, r28
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	08 95       	ret

00000826 <__ultoa_invert>:
 826:	fa 01       	movw	r30, r20
 828:	aa 27       	eor	r26, r26
 82a:	28 30       	cpi	r18, 0x08	; 8
 82c:	51 f1       	breq	.+84     	; 0x882 <__ultoa_invert+0x5c>
 82e:	20 31       	cpi	r18, 0x10	; 16
 830:	81 f1       	breq	.+96     	; 0x892 <__ultoa_invert+0x6c>
 832:	e8 94       	clt
 834:	6f 93       	push	r22
 836:	6e 7f       	andi	r22, 0xFE	; 254
 838:	6e 5f       	subi	r22, 0xFE	; 254
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	af 4f       	sbci	r26, 0xFF	; 255
 842:	b1 e0       	ldi	r27, 0x01	; 1
 844:	3e d0       	rcall	.+124    	; 0x8c2 <__ultoa_invert+0x9c>
 846:	b4 e0       	ldi	r27, 0x04	; 4
 848:	3c d0       	rcall	.+120    	; 0x8c2 <__ultoa_invert+0x9c>
 84a:	67 0f       	add	r22, r23
 84c:	78 1f       	adc	r23, r24
 84e:	89 1f       	adc	r24, r25
 850:	9a 1f       	adc	r25, r26
 852:	a1 1d       	adc	r26, r1
 854:	68 0f       	add	r22, r24
 856:	79 1f       	adc	r23, r25
 858:	8a 1f       	adc	r24, r26
 85a:	91 1d       	adc	r25, r1
 85c:	a1 1d       	adc	r26, r1
 85e:	6a 0f       	add	r22, r26
 860:	71 1d       	adc	r23, r1
 862:	81 1d       	adc	r24, r1
 864:	91 1d       	adc	r25, r1
 866:	a1 1d       	adc	r26, r1
 868:	20 d0       	rcall	.+64     	; 0x8aa <__ultoa_invert+0x84>
 86a:	09 f4       	brne	.+2      	; 0x86e <__ultoa_invert+0x48>
 86c:	68 94       	set
 86e:	3f 91       	pop	r19
 870:	2a e0       	ldi	r18, 0x0A	; 10
 872:	26 9f       	mul	r18, r22
 874:	11 24       	eor	r1, r1
 876:	30 19       	sub	r19, r0
 878:	30 5d       	subi	r19, 0xD0	; 208
 87a:	31 93       	st	Z+, r19
 87c:	de f6       	brtc	.-74     	; 0x834 <__ultoa_invert+0xe>
 87e:	cf 01       	movw	r24, r30
 880:	08 95       	ret
 882:	46 2f       	mov	r20, r22
 884:	47 70       	andi	r20, 0x07	; 7
 886:	40 5d       	subi	r20, 0xD0	; 208
 888:	41 93       	st	Z+, r20
 88a:	b3 e0       	ldi	r27, 0x03	; 3
 88c:	0f d0       	rcall	.+30     	; 0x8ac <__ultoa_invert+0x86>
 88e:	c9 f7       	brne	.-14     	; 0x882 <__ultoa_invert+0x5c>
 890:	f6 cf       	rjmp	.-20     	; 0x87e <__ultoa_invert+0x58>
 892:	46 2f       	mov	r20, r22
 894:	4f 70       	andi	r20, 0x0F	; 15
 896:	40 5d       	subi	r20, 0xD0	; 208
 898:	4a 33       	cpi	r20, 0x3A	; 58
 89a:	18 f0       	brcs	.+6      	; 0x8a2 <__ultoa_invert+0x7c>
 89c:	49 5d       	subi	r20, 0xD9	; 217
 89e:	31 fd       	sbrc	r19, 1
 8a0:	40 52       	subi	r20, 0x20	; 32
 8a2:	41 93       	st	Z+, r20
 8a4:	02 d0       	rcall	.+4      	; 0x8aa <__ultoa_invert+0x84>
 8a6:	a9 f7       	brne	.-22     	; 0x892 <__ultoa_invert+0x6c>
 8a8:	ea cf       	rjmp	.-44     	; 0x87e <__ultoa_invert+0x58>
 8aa:	b4 e0       	ldi	r27, 0x04	; 4
 8ac:	a6 95       	lsr	r26
 8ae:	97 95       	ror	r25
 8b0:	87 95       	ror	r24
 8b2:	77 95       	ror	r23
 8b4:	67 95       	ror	r22
 8b6:	ba 95       	dec	r27
 8b8:	c9 f7       	brne	.-14     	; 0x8ac <__ultoa_invert+0x86>
 8ba:	00 97       	sbiw	r24, 0x00	; 0
 8bc:	61 05       	cpc	r22, r1
 8be:	71 05       	cpc	r23, r1
 8c0:	08 95       	ret
 8c2:	9b 01       	movw	r18, r22
 8c4:	ac 01       	movw	r20, r24
 8c6:	0a 2e       	mov	r0, r26
 8c8:	06 94       	lsr	r0
 8ca:	57 95       	ror	r21
 8cc:	47 95       	ror	r20
 8ce:	37 95       	ror	r19
 8d0:	27 95       	ror	r18
 8d2:	ba 95       	dec	r27
 8d4:	c9 f7       	brne	.-14     	; 0x8c8 <__ultoa_invert+0xa2>
 8d6:	62 0f       	add	r22, r18
 8d8:	73 1f       	adc	r23, r19
 8da:	84 1f       	adc	r24, r20
 8dc:	95 1f       	adc	r25, r21
 8de:	a0 1d       	adc	r26, r0
 8e0:	08 95       	ret

000008e2 <__prologue_saves__>:
 8e2:	2f 92       	push	r2
 8e4:	3f 92       	push	r3
 8e6:	4f 92       	push	r4
 8e8:	5f 92       	push	r5
 8ea:	6f 92       	push	r6
 8ec:	7f 92       	push	r7
 8ee:	8f 92       	push	r8
 8f0:	9f 92       	push	r9
 8f2:	af 92       	push	r10
 8f4:	bf 92       	push	r11
 8f6:	cf 92       	push	r12
 8f8:	df 92       	push	r13
 8fa:	ef 92       	push	r14
 8fc:	ff 92       	push	r15
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	ca 1b       	sub	r28, r26
 90c:	db 0b       	sbc	r29, r27
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	f8 94       	cli
 912:	de bf       	out	0x3e, r29	; 62
 914:	0f be       	out	0x3f, r0	; 63
 916:	cd bf       	out	0x3d, r28	; 61
 918:	09 94       	ijmp

0000091a <__epilogue_restores__>:
 91a:	2a 88       	ldd	r2, Y+18	; 0x12
 91c:	39 88       	ldd	r3, Y+17	; 0x11
 91e:	48 88       	ldd	r4, Y+16	; 0x10
 920:	5f 84       	ldd	r5, Y+15	; 0x0f
 922:	6e 84       	ldd	r6, Y+14	; 0x0e
 924:	7d 84       	ldd	r7, Y+13	; 0x0d
 926:	8c 84       	ldd	r8, Y+12	; 0x0c
 928:	9b 84       	ldd	r9, Y+11	; 0x0b
 92a:	aa 84       	ldd	r10, Y+10	; 0x0a
 92c:	b9 84       	ldd	r11, Y+9	; 0x09
 92e:	c8 84       	ldd	r12, Y+8	; 0x08
 930:	df 80       	ldd	r13, Y+7	; 0x07
 932:	ee 80       	ldd	r14, Y+6	; 0x06
 934:	fd 80       	ldd	r15, Y+5	; 0x05
 936:	0c 81       	ldd	r16, Y+4	; 0x04
 938:	1b 81       	ldd	r17, Y+3	; 0x03
 93a:	aa 81       	ldd	r26, Y+2	; 0x02
 93c:	b9 81       	ldd	r27, Y+1	; 0x01
 93e:	ce 0f       	add	r28, r30
 940:	d1 1d       	adc	r29, r1
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	f8 94       	cli
 946:	de bf       	out	0x3e, r29	; 62
 948:	0f be       	out	0x3f, r0	; 63
 94a:	cd bf       	out	0x3d, r28	; 61
 94c:	ed 01       	movw	r28, r26
 94e:	08 95       	ret

00000950 <_exit>:
 950:	f8 94       	cli

00000952 <__stop_program>:
 952:	ff cf       	rjmp	.-2      	; 0x952 <__stop_program>
